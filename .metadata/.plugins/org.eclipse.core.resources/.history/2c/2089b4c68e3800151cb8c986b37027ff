package problemset;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.LoggerContext;
import org.apache.logging.log4j.core.config.Configuration;

public class Algorithms {
    private static final Logger logger = LogManager.getLogger();
    
    public static void main(String[] args) 
    {
    	LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
    	Configuration conf = ctx.getConfiguration();
    	conf.getLoggerConfig(LogManager.ROOT_LOGGER_NAME).setLevel(Level.DEBUG);
    	ctx.updateLoggers(conf);

        int titleNum;
    	
    	titleNum = 58;
    	switch(titleNum) {
    		case 9: 	IsPalindrome ip = new IsPalindrome();
    					ip.test();
    					break;
    		case 21:	break; // MergeTwoLists
    		case 38:	CountAndSay cas = new CountAndSay();
    					cas.test();
    					break;
    		case 58:	LengthOfLastWord lolw = new LengthOfLastWord();
    					lolw.test();
    					break;
    		case 110:	IsBalanced ib = new IsBalanced();
    		    		ib.test();
    		    		break;
    		case 155:   break; // min stack
    		case 169:	MajorityElement me = new MajorityElement();
    					me.test();
    					break;
    		case 226:	InvertTree it = new InvertTree();
						it.test();
						break;
    		case 234:   IsPalindrome ipLn = new IsPalindrome();
    					ipLn.test2();
    					break;
    		default:	System.out.println("Do nothing.");
    					break;
    	}
		
		logger.trace("trace: everything is logged.");
		logger.debug("debug: no trace.");
		logger.info ("info : no trace, debug.");
		logger.warn ("warn : no trace, debug, info.");
		logger.error("error: no trace, debug, info, warn.");
		logger.fatal("fatal: no trace, debug, info, warn, error.");
   }
}
